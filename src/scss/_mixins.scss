$easeInQuad:      cubic-bezier(0.550,  0.085, 0.680, 0.530);
$easeInCubic:     cubic-bezier(0.550,  0.055, 0.675, 0.190);
$easeInQuart:     cubic-bezier(0.895,  0.030, 0.685, 0.220);
$easeInQuint:     cubic-bezier(0.755,  0.050, 0.855, 0.060);
$easeInSine:      cubic-bezier(0.470,  0.000, 0.745, 0.715);
$easeInExpo:      cubic-bezier(0.950,  0.050, 0.795, 0.035);
$easeInCirc:      cubic-bezier(0.600,  0.040, 0.980, 0.335);
$easeInBack:      cubic-bezier(0.600, -0.280, 0.735, 0.045);

$easeOutQuad:     cubic-bezier(0.250,  0.460, 0.450, 0.940);
$easeOutCubic:    cubic-bezier(0.215,  0.610, 0.355, 1.000);
$easeOutQuart:    cubic-bezier(0.165,  0.840, 0.440, 1.000);
$easeOutQuint:    cubic-bezier(0.230,  1.000, 0.320, 1.000);
$easeOutSine:     cubic-bezier(0.390,  0.575, 0.565, 1.000);
$easeOutExpo:     cubic-bezier(0.190,  1.000, 0.220, 1.000);
$easeOutCirc:     cubic-bezier(0.075,  0.820, 0.165, 1.000);
$easeOutBack:     cubic-bezier(0.175,  0.885, 0.320, 1.275);

$easeInOutQuad:  cubic-bezier(0.455,  0.030, 0.515, 0.955);
$easeInOutCubic: cubic-bezier(0.645,  0.045, 0.355, 1.000);
$easeInOutQuart: cubic-bezier(0.770,  0.000, 0.175, 1.000);
$easeInOutQuint: cubic-bezier(0.860,  0.000, 0.070, 1.000);
$easeInOutSine:  cubic-bezier(0.445,  0.050, 0.550, 0.950);
$easeInOutExpo:  cubic-bezier(1.000,  0.000, 0.000, 1.000);
$easeInOutCirc:  cubic-bezier(0.785,  0.135, 0.150, 0.860);
$easeInOutBack:  cubic-bezier(0.680, -0.550, 0.265, 1.550);



@mixin cover {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
}

@mixin bgcover {
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
}

@mixin coverbgcover {
  @include cover;
  @include bgcover;
}

@mixin bgcontain {
  background-position: center;
  background-size: contain;
  background-repeat: no-repeat;
}

@mixin max_xxl { @media( max-width: $maxwidth_xxl) { @content; } }
@mixin max_xl  { @media( max-width: $maxwidth_xl)  { @content; } }
@mixin max_l   { @media( max-width: $maxwidth_l)   { @content; } }
@mixin max_m   { @media( max-width: $maxwidth_m)   { @content; } }
@mixin max_s   { @media( max-width: $maxwidth_s)   { @content; } }
@mixin max_xs  { @media( max-width: $maxwidth_xs)  { @content; } }

@mixin min_xxl { @media( min-width: $minwidth_xxl) { @content; } }
@mixin min_xl  { @media( min-width: $minwidth_xl)  { @content; } }
@mixin min_l   { @media( min-width: $minwidth_l)   { @content; } }
@mixin min_m   { @media( min-width: $minwidth_m)   { @content; } }
@mixin min_s   { @media( min-width: $minwidth_s)   { @content; } }
@mixin min_xs  { @media( min-width: $minwidth_xs)  { @content; } }

@mixin only_xxl { @media( min-width: $minwidth_xxl) and ( max-width: $maxwidth_xxl) { @content; } }
@mixin only_xl  { @media( min-width: $minwidth_xl)  and ( max-width: $maxwidth_xl)  { @content; } }
@mixin only_l   { @media( min-width: $minwidth_l)   and ( max-width: $maxwidth_l)   { @content; } }
@mixin only_m   { @media( min-width: $minwidth_m)   and ( max-width: $maxwidth_m)   { @content; } }
@mixin only_s   { @media( min-width: $minwidth_s)   and ( max-width: $maxwidth_s)   { @content; } }
@mixin only_xs  { @media( min-width: $minwidth_xs)  and ( max-width: $maxwidth_xs)  { @content; } }



// will return half the input
@function h($num) { @return $num / 2; }

// will return negative the input
@function n($num) { @return 0 - $num; }

// will return negative half the input
@function hn($num) { @return n(h($num)); }



// Truncates text and adds an ellipsis to represent overflow.
@mixin ellipsis {
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
}

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: block;
  }
}

// usage: color:color('red)
// usage: background-color:color('green'); color:textcolor('green');
@function color( $name, $map : $colors2 ){ @if (map-has-key($map, $name)) { $value: map-get($map, unquote($name)); @return nth( $value, 1 ); } }
@function textcolor( $name, $map : $colors2 ){ @if (map-has-key($map, $name)) { $value: map-get($map, unquote($name)); @return nth( $value, 2 ); } }
